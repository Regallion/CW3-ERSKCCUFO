# UfoMaker.crpl
# Created on: 6/7/2019 3:33:16 PM
# ------------------------------------------

# Ufo maker settings
$InitialDelay:60 # in seconds
$ProductionDelay:30 # UFO making delay, counter starts after the previous UFO disapears off-map
$UfosSpawned:1 # How many UFOs spawn at once, maximum amount is 5

# Ufo settings
$Speed:2.0 # movement speed, pixels per frame
$BeamHealth:5.0 # "shields" while in the air
$SniperHealth:300.0 # HP while on the ground

$TargetOnly:"" # only target slected unit(s), leave blank for all targets, separate by comma
$TargetClosest:0 # 1 = target closest unit, 0 = target random unit
$TargetRange:9999 # max cell range (radius), use 9999 for infitite

# Graphics
$StarPoints:5
$StarOffset:1

# Images
$ImageMain:"Custom20"
$ImageLine:"Custom1pp"
$ImageRange:"Custom4_256"

# config flag images
$ImageClosest:"Custom24"
$ImageRandom:"Custom25"
$ImageFinite:"Custom26"
$ImageInfinite:"Custom27"
$ImageUfosOffset:28
$ImageIconBg:"Custom32"

#unit images
$ImageOffset:40 # "Custom[offset]" is collector
$ImageRainmaker:"Custom64" # hand-write custom target images
$ImageFlipEmiter:"Custom65"
$ImageRaincloud:"Custom66"

once
    ShowTraceLog
    ClearTraceLog
    HideTraceLog

    <-UfosSpawned 1 max 5 min ->UfosSpawned
    CreateList ->ActiveUfos

    @DefineConstants
    @Awake

    0 ->Busy
    <-InitialDelay 30 mul ->nextUfo
    
    # team flag used for discovery by clouds
    Self "TeamFlag.crpl" "TeamFlagAttached" GetScriptVar not if
        Self "TeamFlag.crpl" AddScriptToUnit
    endif
    Self "TeamFlag.crpl" "IsEnemy" 1 SetScriptVar
    Self "TeamFlag.crpl" "IsFriendly" 0 SetScriptVar
    Self "TeamFlag.crpl" "CanUfoTarget" 0 SetScriptVar
endonce

GetMouseCell CurrentCoords Distance 2.9 lte ->MouseOver

<-TargetRange 9000 lte if
    @HandleRangeImage
endif

<-MouseOver if
    40 ->alphaChange
else
    -40 ->alphaChange
endif
<-LineAlpha 0 neq if
    <-LineAlpha <-alphaChange add 0 max 255 min ->LineAlpha
    @RenderLines
else
    <-LineAlpha <-alphaChange add 0 max 255 min ->LineAlpha
endif

IsPaused if
    return
endif

<-Busy 0 lte if
    <-nextUfo 0 lte if
        @CreateUFO
        <-ProductionDelay 30 mul ->nextUfo
    else
        <-nextUfo 1 sub ->nextUfo
    endif
endif

@AnimateImages
@SetText

StackSize 0 gt if
    "NONEMPTY STACK!" Trace
    TraceStack
endif

:DefineConstants
    "Custom" <-ImageOffset 00 add concat ->IMG_COLLECTOR
    "Custom" <-ImageOffset 01 add concat ->IMG_RELAY
    "Custom" <-ImageOffset 02 add concat ->IMG_REACTOR
    "Custom" <-ImageOffset 03 add concat ->IMG_SHIELD
    "Custom" <-ImageOffset 04 add concat ->IMG_OREMINE
    "Custom" <-ImageOffset 05 add concat ->IMG_SIPHON
    "Custom" <-ImageOffset 06 add concat ->IMG_TERP
    "Custom" <-ImageOffset 07 add concat ->IMG_GUPPY

    "Custom" <-ImageOffset 08 add concat ->IMG_PULSECANNON
    "Custom" <-ImageOffset 09 add concat ->IMG_MORTAR
    "Custom" <-ImageOffset 10 add concat ->IMG_STRAFER
    "Custom" <-ImageOffset 11 add concat ->IMG_BOMBER
    "Custom" <-ImageOffset 12 add concat ->IMG_NULLIFIER
    "Custom" <-ImageOffset 13 add concat ->IMG_SPRAYER
    "Custom" <-ImageOffset 14 add concat ->IMG_BEAM
    "Custom" <-ImageOffset 15 add concat ->IMG_SNIPER

    "Custom" <-ImageOffset 16 add concat ->IMG_BERTHA
    "Custom" <-ImageOffset 17 add concat ->IMG_GUPPYAIR
    "Custom" <-ImageOffset 18 add concat ->IMG_STRAFERAIR
    "Custom" <-ImageOffset 19 add concat ->IMG_BOMBERAIR
    
    "Custom" <-ImageOffset 20 add concat ->IMG_COMMANDNODE
    "Custom" <-ImageOffset 21 add concat ->IMG_ANTIEMITTER
    
    <-ImageRainmaker "IMG_CRPLCORE:CloudMaker" ->!
    <-ImageFlipEmiter "IMG_CRPLCORE:FlipEmitter" ->!
    <-ImageRaincloud "IMG_CRPLCORE:CreeperCloud" ->!

    1 "ColorByAc_CRPLCORE:CloudMaker" ->!
    1 "ColorByAc_CRPLCORE:FlipEmitter" ->!
    1 "ColorByAc_CRPLCORE:CreeperCloud" ->!

    <-UfosSpawned 12.0 @CreateOffsetList ->OffsetsY ->OffsetsX

    # parse "target only" parameter
    <-TargetOnly "," Split ->TargetOnlyList
    0 ->i
    while <-i <-TargetOnlyList GetListCount lt repeat
        <-TargetOnlyList <-i GetListElement ->tar
        "IMG_" <-tar concat -?! not if
            # invalid variable - destroy it from the list
            <-TargetOnlyList <-i RemoveListElement
        else
            <-i 1 add ->i
        endif
    endwhile

:CreateOffsetList # offset count, offset amount - listX listY
    ->COL_Amt
    5 min 1 max ->COL_Count
    
    <-COL_Count CreateListStartingSize ->COL_OffsetsX
    <-COL_Count CreateListStartingSize ->COL_OffsetsY

    <-COL_Count 1 eq if
        <-COL_OffsetsX 0 0.0 SetListElement
        <-COL_OffsetsY 0 0.0 SetListElement
    endif
    <-COL_Count 2 eq if
        <-COL_OffsetsX 0 <-COL_Amt neg SetListElement
        <-COL_OffsetsY 0 0.0           SetListElement
        <-COL_OffsetsX 1 <-COL_Amt     SetListElement
        <-COL_OffsetsY 1 0.0           SetListElement
    endif
    <-COL_Count 3 eq if
        <-COL_OffsetsX 0 0.0                  SetListElement
        <-COL_OffsetsY 0 <-COL_Amt 1.333 mul  SetListElement
        <-COL_OffsetsX 1 <-COL_Amt neg        SetListElement
        <-COL_OffsetsY 1 <-COL_Amt -0.666 mul SetListElement
        <-COL_OffsetsX 2 <-COL_Amt            SetListElement
        <-COL_OffsetsY 2 <-COL_Amt -0.666 mul SetListElement
    endif
    <-COL_Count 4 gte if
        <-COL_OffsetsX 0 <-COL_Amt neg SetListElement
        <-COL_OffsetsY 0 <-COL_Amt     SetListElement
        <-COL_OffsetsX 1 <-COL_Amt     SetListElement
        <-COL_OffsetsY 1 <-COL_Amt     SetListElement
        <-COL_OffsetsX 2 <-COL_Amt neg SetListElement
        <-COL_OffsetsY 2 <-COL_Amt neg SetListElement
        <-COL_OffsetsX 3 <-COL_Amt     SetListElement
        <-COL_OffsetsY 3 <-COL_Amt neg SetListElement
    endif
    <-COL_Count 5 eq if
        <-COL_OffsetsX 4 0.0 SetListElement
        <-COL_OffsetsY 4 0.0 SetListElement
    endif

    <-COL_OffsetsX <-COL_OffsetsY return

:RenderLines
    CurrentPixelCoords ->cy ->cx
    0 ->i
    while <-i <-ActiveUfos GetListCount lt repeat
        <-ActiveUfos <-i GetListElement ->ufo
        "uline" <-ufo concat ->name
        <-ufo CONST_ISDESTROYED GetUnitAttribute if
            Self <-name "none" SetImage
            <-ActiveUfos <-i RemoveListElement
        else
            <-ufo CONST_PIXELCOORDX GetUnitAttribute <-cx sub ->rx
            <-ufo CONST_PIXELCOORDY GetUnitAttribute <-cy sub ->ry

            Self <-name <-rx 2.0 div <-ry 2.0 div -60 SetImagePosition
            Self <-name <-ry <-rx atan2 SetImageRotation
            Self <-name <-rx <-ry 0 0 Distance 24.0 div 0.1 SetImageScale
            Self <-name 32 224 224 <-LineAlpha SetImageColor

            <-i 1 add ->i
        endif
    endwhile

:HandleRangeImage
    <-MouseOver if
        Self "range" 255 255 255 255 SetImageColor
    else
        Self "range" 0 0 0 0 SetImageColor
    endif

:CreateUFO
    <-UfosSpawned 0 do
        "CRPLCORE" CurrentCoords CreateUnit ->ufo
        <-ufo "UfoUnit.crpl" AddScriptToUnit
        <-ufo "UfoUnit.crpl" "CreatedBy" Self SetScriptVar
        <-ufo "UfoUnit.crpl" "Speed" <-Speed SetScriptVar
        <-ufo "UfoUnit.crpl" "BeamHealth" <-BeamHealth SetScriptVar
        <-ufo "UfoUnit.crpl" "SniperHealth" <-SniperHealth SetScriptVar
        <-ufo "UfoUnit.crpl" "TargetOnlyList" <-TargetOnlyList SetScriptVar
        <-ufo "UfoUnit.crpl" "TargetClosest" <-TargetClosest SetScriptVar
        <-ufo "UfoUnit.crpl" "TargetRange" <-TargetRange SetScriptVar
        <-ufo "UfoUnit.crpl" "OffsetX" <-OffsetsX I GetListElement SetScriptVar
        <-ufo "UfoUnit.crpl" "OffsetY" <-OffsetsY I GetListElement SetScriptVar

        Self "uline" <-ufo concat <-ImageLine SetImage
        Self "uline" <-ufo concat 0 0 SetImageScale
        <-ActiveUfos <-ufo AppendToList
    loop
    <-UfosSpawned ->Busy

:SetText
    <-Busy 0 gt if
        "♃♄⚵ ♅♆ ♇☦" SetText
        256 0 64 256 SetTextColor
    else
        "♆♃♇ " <-nextUfo 30.0 div 0 Round " ♄♃" concat concat SetText
        0 256 64 256 SetTextColor
    endif

:AnimateImages
    6 ->shortR
    13 ->longR

    GetGameTimeFrames -120.0 div ->shortA
    GetGameTimeFrames 40.0 div ->longA

    <-StarPoints 0 do
        # compute long point
        I <-starAngle mul <-longA add dup
            cos <-longR mul ->x2
            sin <-longR mul ->y2

        # compute first short point
        I <-starAngle mul <-shortA add dup
            cos <-shortR mul ->x1
            sin <-shortR mul ->y1
        # draw first line
        "line" I 2 mul concat ->iname
        @DrawLine

        # compute second short point
        I <-StarOffset add <-starAngle mul <-shortA add dup
            cos <-shortR mul ->x1
            sin <-shortR mul ->y1
        # draw second line
        "line" I 2 mul 1 add concat ->iname
        @DrawLine
    loop

:DrawLine
    Self <-iname
        <-x1 <-x2 add 2.0 div
        <-y1 <-y2 add 2.0 div
        -0.01 SetImagePosition
    Self <-iname
        <-x1 <-y1 <-x2 <-y2 Distance 24.0 div
        0.06666 SetImageScale
    Self <-iname
        <-y2 <-y1 sub
        <-x2 <-x1 sub
        atan2 SetImageRotation

:CreateImages
    Self "main" <-ImageMain SetImage
    Self "main" 5 3.0 div dup SetImageScale

    <-StarPoints 2 mul 0 do
        "line" I concat ->iname
        Self <-iname <-ImageLine SetImage
        Self <-iname 192 64 16 255 SetImageColor
        #Self <-iname I 25 mul 256 I 25 mul sub 32 255 SetImageColor
    loop
    6.28318530718 <-StarPoints div ->starAngle

    <-TargetClosest if
        Self "target" <-ImageClosest SetImage
    else
        Self "target" <-ImageRandom SetImage
    endif
    Self "target" 20 -20 -0.01 SetImagePosition
    Self "target" 0.666666 dup SetImageScale
    
    <-TargetOnlyList GetListCount 2 gte if
        Self "only" <-ImageIconBg SetImage
        Self "only" -20 -20 -0.01 SetImagePosition
        Self "only" 0.666666 dup SetImageScale
    else
        Self "only" "none" SetImage
    endif

    # get AC color + convert black to dark brown
    GetCreeperColors 255 mul ->B 255 mul ->G 255 mul ->R
    <-R <-G <-B max max 64 lt if
        <-R 64 add ->R
        <-G 64 add ->G
        <-B 64 add ->B
    endif

    <-TargetOnlyList GetListCount 4.0 @CreateOffsetList ->offsetsY ->offsetsX
    <-TargetOnlyList GetListCount 0 do
        <-TargetOnlyList I GetListElement ->img
        "only" I concat ->name
        Self <-name "IMG_" <-img concat <-! SetImage
        Self <-name -20 <-offsetsX I GetListElement add -20 <-offsetsY I GetListElement add -0.02 SetImagePosition
        <-TargetOnlyList GetListCount 1 eq if
            Self <-name 0.666666 dup SetImageScale
        else
            Self <-name 0.333333 dup SetImageScale
        endif
        "ColorByAc_" <-img concat <-! if
            Self <-name <-R <-G <-B 255 SetImageColor
        else
            Self <-name 255 255 255 255 SetImageColor
        endif
    loop
    5 <-TargetOnlyList GetListCount do
        Self "only" I concat "none" SetImage
    loop

    <-UfosSpawned 1 gt if
        Self "ufos" "Custom" <-UfosSpawned 2 sub <-ImageUfosOffset add concat SetImage
        Self "ufos" -20 20 -0.01 SetImagePosition
        Self "ufos" 0.666666 dup SetImageScale
    else
        Self "ufos" "none" SetImage
    endif

    <-TargetRange 9000 lte if
        Self "range" <-ImageRange SetImage
        Self "range" <-TargetRange 1.5 div dup SetImageScale
        Self "range" 0 0 0 0 SetImagePosition

        Self "rangee" <-ImageFinite SetImage
    else
        Self "range" "none" SetImage
        
        Self "rangee" <-ImageInfinite SetImage
    endif
    Self "rangee" 20 20 -0.01 SetImagePosition
    Self "rangee" 0.666666 dup SetImageScale

:Awake
    Self CONST_TAKEMAPSPACE 1 SetUnitAttribute
    Self CONST_CONNECTABLE 0 SetUnitAttribute
    Self CONST_SUPPORTSDIGITALIS 0 SetUnitAttribute
    Self CONST_CREATEPZ 1 SetUnitAttribute
    Self CONST_COUNTSFORVICTORY 1 SetUnitAttribute
    Self CONST_NULLIFIERDAMAGES 1 SetUnitAttribute
    Self CONST_CELLWIDTH 5 SetUnitAttribute
    Self CONST_CELLHEIGHT 5 SetUnitAttribute

    0.5 SetTextSize
    32 SetTextY

    1 OperateWhilePaused

    @CreateImages
    0 ->LineAlpha
    @RenderLines
